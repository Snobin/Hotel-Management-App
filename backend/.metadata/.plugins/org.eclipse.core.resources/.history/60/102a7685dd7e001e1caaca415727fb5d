package com.example.demo.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class securityconfig {

	@Bean
	public UserDetailsService userDetailsService(PasswordEncoder encoder) {
		
		UserDetails admin=User.withUsername("abcd").password(encoder.encode("1234")).roles("ADMIN").build();
		UserDetails user=User.withUsername("abd").password(encoder.encode("12345")).roles("USER").build();

		return new InMemoryUserDetailsManager(admin,user);
	}
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests()
        .requestMatchers(HttpMethod.GET, "/api/private").hasRole("USER")
        .requestMatchers(HttpMethod.GET, "/api/public").permitAll()
        .requestMatchers(HttpMethod.GET, "/actuator/**").permitAll()
        .requestMatchers(HttpMethod.POST, "/oauth/token").permitAll()
        .requestMatchers(HttpMethod.POST, "/oauth/client/token").permitAll()
        .requestMatchers("/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs", "/v3/api-docs/**").permitAll()
        .requestMatchers("/**").permitAll()
        .anyRequest().authenticated();
http.oauth2ResourceServer()
        .jwt();
http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
http.cors().and().csrf().disable();
return http.build();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
}
